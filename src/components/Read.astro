---
import { getCollection } from "astro:content";
import { Icon } from "astro-icon";

const ChapterOnes = await getCollection("translations", ({ data }) => {
  return data.Chapter === 1;
});
const translations = ChapterOnes.map((chapterOne) => {
  const { Code, Date, Translator } = chapterOne.data;
  return { Code, Date, Translator };
});
---

<div
  id="read"
  class="flex flex-col lg:grid lg:grid-cols-[1fr,3fr] gap-16 h-full px-12 py-16"
>
  <h1 class="text-2xl">
    We compiled translations from different authors at different points of
    history alongside the original Enchiridion to make sure you can read your
    favorite version of it.
  </h1>
  <div class="relative flex flex-col gap-2">
    <div class="absolute -top-8 right-0">
      <button
        class="hidden items-center w-max p-2 -m-2 transition-all opacity-100 text-zinc-600 hover:text-zinc-900 duration-200 underline-offset-2 underline outline-none focus-visible:ring-2 ring-zinc-500 ring-offset-zinc-100 ring-offset-2"
        id="eraseProgressCTA"
        onclick="eraseProgress()"
        >Erase reading progress
      </button>
    </div>
    <div class="group pointer-events-none">
      <ul
        class="peer flex flex-col transition-colors group-focus-within:text-zinc-400 group-hover:text-zinc-400 pointer-events-none divide-y divide-zinc-300 border-y border-zinc-300 h-min"
      >
        {
          translations
            .sort((a, b) => (a.Date < b.Date ? 1 : -1))
            .map((translation) => (
              <li>
                <a
                  class="py-6 block transition-colors focus:text-zinc-900 hover:text-zinc-900 pointer-events-auto outline-none ring-zinc-500 focus-visible:ring-2 focus-within:z-10 relative"
                  href={`/read/${translation.Code}`}
                >
                  <div class="flex gap-4 justify-between">
                    <div
                      class="inline-flex gap-4"
                      id={`read-${translation.Code}`}
                    >
                      <span>{translation.Translator}</span>
                      <span
                        data-read-cta={translation.Code}
                        class="hidden opacity-0 transition-all items-center gap-4 text-zinc-500"
                      >
                        â€”
                        <div>
                          <span id={`${translation.Code}-slot`} />
                          <Icon
                            class="inline h-[15px] w-[15px]"
                            name="radix-icons:reader"
                          />
                        </div>
                      </span>
                    </div>
                    <div class="inline-block w-[4ch] tabular-nums text-right">
                      {translation.Date}
                    </div>
                  </div>
                </a>
              </li>
            ))
        }
      </ul>
      <a
        class="a pointer-events-auto flex gap-1 items-center peer-hover:text-zinc-400 peer-focus-within:text-zinc-400 text-zinc-600 hover:text-zinc-900 focus:text-zinc-900 transition-colors p-2 -ml-2 w-max underline underline-offset-2 outline-none focus-visible:ring-2 ring-zinc-500 ring-offset-zinc-100 ring-offset-2"
        href="/compare/all"
        >Compare all translations<Icon
          class="inline h-[15px] w-[15px] transition-transform transform translate-y-[1px]"
          name="radix-icons:arrow-right"
        />
      </a>
    </div>
  </div>
  <style>
    /* Group-* applies to all groups so I can't use it on this CTA since it will be activated by the group some nodes up the tree that handles graying stuff on hover */
    .a:hover > *,
    .a:focus-visible > * {
      @apply translate-x-1;
    }
  </style>
  <script client:load>
    const readCTAs = document.querySelectorAll("span[data-read-cta]");
    const eraseProgressCTA = document.querySelector("#eraseProgressCTA");
    let someWasRead = false;

    readCTAs.forEach((CTA) => {
      const translation = CTA.attributes["data-read-cta"].value;
      const readUpTo = localStorage.getItem(translation);

      if (readUpTo) {
        const slot = document.getElementById(`${translation}-slot`);
        slot.innerText = readUpTo;
        CTA.title = `Read up to chapter ${readUpTo}`;
        CTA.classList.remove("hidden");
        CTA.classList.add("flex");
        CTA.classList.remove("opacity-0");
        CTA.classList.add("opacity-100");

        if (!someWasRead) {
          console.log("some wasn't read");
          eraseProgressCTA.classList.remove("hidden");
          eraseProgressCTA.classList.add("flex");
        }
      }
    });

    const eraseProgress = () => {
      readCTAs.forEach((CTA) => {
        const translation = CTA.attributes["data-read-cta"].value;
        const readUpTo = localStorage.getItem(translation);

        if (readUpTo) {
          localStorage.removeItem(translation);

          const slot = document.getElementById(`${translation}-slot`);
          slot.innerText = readUpTo;
          CTA.classList.remove("opacity-100");
          CTA.classList.add("opacity-0");
          CTA.classList.add("translate-x-2");

          eraseProgressCTA.textContent = "Done!";
          eraseProgressCTA.classList.add("pointer-events-none");
          eraseProgressCTA.classList.remove("underline");
          setTimeout(() => {
            eraseProgressCTA.classList.add("opacity-0");
            eraseProgressCTA.classList.add("translate-x-4");
          }, 1000);

          setTimeout(() => {
            // After progress indicatos fade out
            eraseProgressCTA.classList.remove("opacity-100");
            CTA.classList.remove("flex");
            CTA.classList.add("hidden");
          }, 150);
        }
      });
    };
  </script>
</div>
