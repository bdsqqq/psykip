---
import type { MarkdownInstance } from "astro";
import type { Frontmatter as ChapterFrontmatter } from "./[translation]/[chapter].astro";
import type { TranslationCode } from "../../data/codes"
import Base from "../../layouts/base.astro";
import codes from "../../data/codes";
import Chapter from "../../components/Chapter.astro";
import SourceFooter from "../../components/SourceFooter.astro";

export function getStaticPaths() {
  return codes.map((code) => ({
    params: {
      translation: code,
    },
  }));
}

const { translation } = Astro.params as {
  translation: TranslationCode
};

interface Frontmatter {
  Author: string;
  Title: string;
  Translator: string;
  Date: string;
  Source: {
    label: string;
    url: string;
  };
  Code: TranslationCode;
}

const { frontmatter } = (await import(
  `../../data/${translation}/index.md`
)) as MarkdownInstance<Frontmatter>;

const chapters = new Array(53).fill(0).map((_, i) => i + 1);

const MDs = await Promise.all(
  chapters.map(
    async (chapter) =>
      (await import(
        `../../data/${translation}/chapters/${chapter}.md`
      )) as MarkdownInstance<ChapterFrontmatter>
  )
);
---
<Base
  title={`${frontmatter.Translator}'s translation â€” The manual, a compilation of the Enchiridion translations`}
  description={`Read ${frontmatter.Translator}'s Translation of the Enchiridion. We compiled translations from diferent authors at diferent points of history alongisde the original Enchiridion from Epictetus to make sure you can easily read and share your favorite version of it.`}
>
  <div id="continueToolbar" class="hidden absolute w-full gap-4 justify-between md:justify-start lg:flex-col lg:gap-2 px-8 md:px-12 py-6 mx-auto">
    <a id="continueCTA"/>
    <!--Hidden for now while functionality isn't implemented -->
    <span class="hidden">Clear progress</span>
  </div>
  <div class="flex flex-col gap-40 px-8 md:px-12 py-16">
    <div class="flex flex-col gap-24 mx-auto">
      {
        MDs.map((MD, i) => (
          <div data-chapter={i + 1}>
            <Chapter
              translationCode={translation}
              chapterNumber={(i + 1).toString()}
              chapterHead={MD.frontmatter.Chapter}
              chapterId={`${translation}-${i + 1}`}
            >
              <MD.Content key={i} />
            </Chapter>
          </div>
        ))
      }
    </div>

    <SourceFooter url={frontmatter.Source.url} label={frontmatter.Source.label}
    />
  </div>  
</Base>
<script>
  const translation = window.location.href.split("/").slice(-1)[0].split("#")[0];
  
  let readUpTo = localStorage.getItem(translation);

  if (readUpTo){
    const continueCTA = document.querySelector<HTMLAnchorElement>("#continueCTA");
    if(!continueCTA){
      console.log("couldn't find #continueCTA")
      return
    }
    continueCTA.href = `#${readUpTo}`
    continueCTA.innerText = `Continue from chapter ${readUpTo}`

    const continueToolbar = document.querySelector("#continueToolbar");
    if(!continueToolbar){
      console.log("couldn't find #continueToolbar")
      return
    }
    continueToolbar.classList.remove("hidden");
    continueToolbar.classList.add("flex")
  }

  const observer = new IntersectionObserver(entries => {
    entries.forEach((entry) => {
      const intersecting = entry.isIntersecting
      if(intersecting){
        const chapter = entry.target.attributes["data-chapter"].value as string;
        if(!readUpTo || parseInt(chapter) > parseInt(readUpTo)){
          localStorage.setItem(translation, chapter)
          readUpTo = localStorage.getItem(translation)
        }
      } 
    })
  }, {threshold: 1})
  
  const Chapters = document.querySelectorAll("div[data-chapter]")
  Chapters.forEach(chapter => {
    observer.observe(chapter)
  })
</script>