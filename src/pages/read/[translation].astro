---
import type { MarkdownInstance } from "astro";
import type { Frontmatter as ChapterFrontmatter } from "./[translation]/[chapter].astro";
import Base from "../../layouts/base.astro";
import codes from "../../data/codes";
import { Icon } from "astro-icon";
import Chapter from "../../components/Chapter.astro";

export function getStaticPaths() {
  return codes.map((code) => ({
    params: {
      translation: code,
    },
  }));
}

const { translation } = Astro.params;

interface Frontmatter {
  Author: string;
  Title: string;
  Translator: string;
  Date: string;
  Source: {
    label: string;
    url: string;
  };
  Code: string;
}

const { frontmatter } = (await import(
  `../../data/${translation}/index.md`
)) as MarkdownInstance<Frontmatter>;

const chapters = new Array(53).fill(0).map((_, i) => i + 1);

const MDs = await Promise.all(
  chapters.map(
    async (chapter) =>
      (await import(
        `../../data/${translation}/chapters/${chapter}.md`
      )) as MarkdownInstance<ChapterFrontmatter>
  )
);
---

<Base title={frontmatter.Author}>
  <div class="flex flex-col gap-24 px-12 py-16">
    {
      MDs.map((MD, i) => (
        <div class="mx-auto">
          <Chapter
            translationCode={translation}
            chapterNumber={(i + 1).toString()}
            chapterHead={MD.frontmatter.Chapter}
          >
            <MD.Content key={i} />
          </Chapter>
        </div>
      ))
    }

    <footer>
      The source of this translation is <a
        class="underline underline-offset-2 outline-none focus-visible:ring ring-zinc-900 ring-offset-zinc-100"
        href={frontmatter.Source.url}
        >{frontmatter.Source.label}<Icon
          class="inline h-[15px] w-[15px] transition-transform transform translate-y-[1px]"
          name="radix-icons:arrow-top-right"
        />
      </a>
    </footer>
  </div>
</Base>
